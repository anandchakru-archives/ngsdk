import { Injectable, PLATFORM_ID, NgZone } from '@angular/core';
import * as firebase from 'firebase/app';
import * as moment_ from 'moment-timezone';
import { AngularFireAuth } from '@angular/fire/auth';
import { Subject, ReplaySubject, Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { Invite, Guest } from '../util/nivite3-model';
import { AngularFirestore, Action, DocumentSnapshot } from '@angular/fire/firestore';
import { AngularFireStorage } from '@angular/fire/storage';
import { map } from 'rxjs/operators';

const moment = moment_;

@Injectable({
  providedIn: 'root'
})
export class UtilService {
  provider = new firebase.auth.GoogleAuthProvider();
  invite: Invite;
  inviteId: string;
  authLoaded = false;
  guestFid: string;
  collapsed = true;
  user: firebase.User;
  userSub: Subject<firebase.User> = new ReplaySubject(1);
  inviteSub: Subject<Invite> = new Subject();
  guestSub: Subject<Guest> = new Subject();
  // Hard coding for now, because CORS blocked https://nivite.jrvite.com/__/firebase/init.js
  // Find a way to do this:
  // this.http.get('https://nivite.jrvite.com/__/firebase/init.js').subscribe((rsp) => {
  //   this.niviteFireAuth = new AngularFireAuth(this.firebaseWebConfig, this.firebaseWebConfig.appId, PLATFORM_ID, this.ngZone);
  // });
  niviteFirebaseWebConfig = {
    apiKey: 'AIzaSyDUFUg-yCwu0GbvSf8DJ-17WlzcgnbZhzo',
    appId: '1:212059574978:web:f955498611c402d9',
    databaseURL: 'https://nivite-firebase.firebaseio.com',
    storageBucket: 'nivite-firebase.appspot.com',
    authDomain: 'nivite-firebase.firebaseapp.com',
    messagingSenderId: '212059574978',
    projectId: 'nivite-firebase'
  };
  niviteFireAuth: AngularFireAuth;
  customerFirestore: AngularFirestore;
  customerFireStorage: AngularFireStorage;

  constructor(private http: HttpClient, private ngZone: NgZone) {
    this.niviteFireAuth = new AngularFireAuth(this.niviteFirebaseWebConfig, this.niviteFirebaseWebConfig.appId, PLATFORM_ID, this.ngZone);
    if (this.niviteFireAuth) {
      this.provider.addScope('profile');
      this.provider.addScope('email');
      this.niviteFireAuth.authState.subscribe((user: firebase.User) => {
        this.user = user;
        this.authLoaded = true;
        this.userSub.next(user);
      }, (error) => {
        this.authLoaded = true;
        this.userSub.next(undefined);
      });
    }
    const url = new URL(window.location.href).searchParams;
    this.inviteId = url.get('iid');       // invite id
    this.guestFid = url.get('guestfid');  // guest fid [firestore autogenerated id]
  }
  initializeFirestore(hostFirestoreWebConfig: any/* gapi.client.firebase.WebAppConfig */) {
    this.customerFirestore = new AngularFirestore(
      hostFirestoreWebConfig, hostFirestoreWebConfig.appId, false, null, PLATFORM_ID, this.ngZone, null);
    this.customerFireStorage = new AngularFireStorage(
      hostFirestoreWebConfig, hostFirestoreWebConfig.appId, hostFirestoreWebConfig.storageBucket, PLATFORM_ID, this.ngZone);
    this.customerFirestore.doc<Invite>('nivites/' + this.inviteId).snapshotChanges()
      .pipe(map((docSnap: Action<DocumentSnapshot<Invite>>) => {
        this.invite = docSnap.payload.data();
        this.inviteId = docSnap.payload.id;
        this.invite.timeFrom = this.ifNumberMoment(this.invite.timeFrom);
        this.invite.timeTo = this.ifNumberMoment(this.invite.timeTo);
        return docSnap;
      })).subscribe((docSnap: Action<DocumentSnapshot<Invite>>) => {
        this.inviteSub.next(docSnap.payload.data());
      }, (error) => {
        this.inviteSub.next(undefined);
      });
    this.customerFirestore.doc<Guest>('nivites/' + this.inviteId + '/guests/' + this.guestFid).snapshotChanges().
      pipe(map((docSnap: Action<DocumentSnapshot<Guest>>) => {
        return docSnap;
      })).subscribe((docSnap: Action<DocumentSnapshot<Guest>>) => {
        this.guestSub.next(docSnap.payload.data());
      }, (error) => {
        this.guestSub.next(undefined);
      });

  }
  private ifNumberMoment(input: moment_.Moment | number): moment_.Moment {
    return (typeof input === 'number') ? moment(input) : input;
  }
  check(): Observable<firebase.User> {
    return this.userSub.asObservable();
  }
  google() {
    this.niviteFireAuth.auth.signInWithPopup(this.provider);
  }
  logout() {
    /* localStorage.removeItem(Nivite3Constant.SELECTED_FIREBASE_PROJECT);
    localStorage.removeItem(Nivite3Constant.SELECTED_FIREBASE_WEBAPP);
    localStorage.removeItem(Nivite3Constant.SELECTED_FIREBASE_CONFIG);
    localStorage.removeItem(Nivite3Constant.SELECTED_FIREBASE_USER); */
    this.niviteFireAuth.auth.signOut();
  }
  toggleNav() {
    this.collapsed = !this.collapsed;
  }
  hideNav() {
    this.collapsed = true;
  }

  showRsvpModal() {

  }

}
